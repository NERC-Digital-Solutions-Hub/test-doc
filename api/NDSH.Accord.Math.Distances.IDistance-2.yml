### YamlMime:ManagedReference
items:
- uid: NDSH.Accord.Math.Distances.IDistance`2
  commentId: T:NDSH.Accord.Math.Distances.IDistance`2
  id: IDistance`2
  parent: NDSH.Accord.Math.Distances
  children:
  - NDSH.Accord.Math.Distances.IDistance`2.Distance(`0,`1)
  langs:
  - csharp
  - vb
  name: IDistance<T, U>
  nameWithType: IDistance<T, U>
  fullName: NDSH.Accord.Math.Distances.IDistance<T, U>
  type: Interface
  source:
    remote:
      path: Proj/src/src/NDSH/src/Accord/Math/Distances/IDistance.cs
      branch: dev
      repo: https://github.com/NERC-Digital-Solutions-Hub/ndsh-dotnet-temp.git
    id: IDistance
    path: ../../../GitHub/ndsh-dotnet-temp/dev/Proj/src/src/NDSH/src/Accord/Math/Distances/IDistance.cs
    startLine: 48
  assemblies:
  - NDSH
  namespace: NDSH.Accord.Math.Distances
  summary: Common interface for distance functions (not necessarily metrics).
  remarks: >-
    <p>
      The framework distinguishes between metrics and distances by using different
      types for them. This makes it possible to let the compiler figure out logic
      problems such as the specification of a non-metric for a method that requires
      a proper metric (i.e. that respects the triangle inequality).</p>

    <p>
      The objective of this technique is to make it harder to make some mistakes.
      However, it is generally possible to bypass this mechanism by using named constructors
      available at each of the classes, such as Minkowski's Minkowski.Nonmetric 
      method, to create distances implementing the <xref href="NDSH.Accord.Math.Distances.IMetric%601" data-throw-if-not-resolved="false"></xref> interface that are not
      really metrics. Use at your own risk.</p>
  example: []
  syntax:
    content: public interface IDistance<in T, in U>
    typeParameters:
    - id: T
      description: The type of the first element to be compared.
    - id: U
      description: The type of the second element to be compared.
    content.vb: Public Interface IDistance(Of In T, In U)
  seealso:
  - linkId: NDSH.Accord.Math.Distances.IMetric`1
    commentId: T:NDSH.Accord.Math.Distances.IMetric`1
  nameWithType.vb: IDistance(Of T, U)
  fullName.vb: NDSH.Accord.Math.Distances.IDistance(Of T, U)
  name.vb: IDistance(Of T, U)
- uid: NDSH.Accord.Math.Distances.IDistance`2.Distance(`0,`1)
  commentId: M:NDSH.Accord.Math.Distances.IDistance`2.Distance(`0,`1)
  id: Distance(`0,`1)
  parent: NDSH.Accord.Math.Distances.IDistance`2
  langs:
  - csharp
  - vb
  name: Distance(T, U)
  nameWithType: IDistance<T, U>.Distance(T, U)
  fullName: NDSH.Accord.Math.Distances.IDistance<T, U>.Distance(T, U)
  type: Method
  source:
    remote:
      path: Proj/src/src/NDSH/src/Accord/Math/Distances/IDistance.cs
      branch: dev
      repo: https://github.com/NERC-Digital-Solutions-Hub/ndsh-dotnet-temp.git
    id: Distance
    path: ../../../GitHub/ndsh-dotnet-temp/dev/Proj/src/src/NDSH/src/Accord/Math/Distances/IDistance.cs
    startLine: 63
  assemblies:
  - NDSH
  namespace: NDSH.Accord.Math.Distances
  summary: >-
    Computes the distance <code>d(x,y)</code> between points

    <code class="paramref">x</code> and <code class="paramref">y</code>.
  example: []
  syntax:
    content: double Distance(T x, U y)
    parameters:
    - id: x
      type: '{T}'
      description: The first point <code>x</code>.
    - id: y
      type: '{U}'
      description: The second point <code>y</code>.
    return:
      type: System.Double
      description: >-
        A double-precision value representing the distance <code>d(x,y)</code>

        between <code class="paramref">x</code> and <code class="paramref">y</code> according 

        to the distance function implemented by this class.
    content.vb: Function Distance(x As T, y As U) As Double
  overload: NDSH.Accord.Math.Distances.IDistance`2.Distance*
  nameWithType.vb: IDistance(Of T, U).Distance(T, U)
  fullName.vb: NDSH.Accord.Math.Distances.IDistance(Of T, U).Distance(T, U)
references:
- uid: NDSH.Accord.Math.Distances.IMetric`1
  commentId: T:NDSH.Accord.Math.Distances.IMetric`1
  href: NDSH.Accord.Math.Distances.IMetric-1.html
  name: IMetric<T>
  nameWithType: IMetric<T>
  fullName: NDSH.Accord.Math.Distances.IMetric<T>
  nameWithType.vb: IMetric(Of T)
  fullName.vb: NDSH.Accord.Math.Distances.IMetric(Of T)
  name.vb: IMetric(Of T)
  spec.csharp:
  - uid: NDSH.Accord.Math.Distances.IMetric`1
    name: IMetric
    href: NDSH.Accord.Math.Distances.IMetric-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NDSH.Accord.Math.Distances.IMetric`1
    name: IMetric
    href: NDSH.Accord.Math.Distances.IMetric-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NDSH.Accord.Math.Distances
  commentId: N:NDSH.Accord.Math.Distances
  href: NDSH.html
  name: NDSH.Accord.Math.Distances
  nameWithType: NDSH.Accord.Math.Distances
  fullName: NDSH.Accord.Math.Distances
  spec.csharp:
  - uid: NDSH
    name: NDSH
    href: NDSH.html
  - name: .
  - uid: NDSH.Accord
    name: Accord
    href: NDSH.Accord.html
  - name: .
  - uid: NDSH.Accord.Math
    name: Math
    href: NDSH.Accord.Math.html
  - name: .
  - uid: NDSH.Accord.Math.Distances
    name: Distances
    href: NDSH.Accord.Math.Distances.html
  spec.vb:
  - uid: NDSH
    name: NDSH
    href: NDSH.html
  - name: .
  - uid: NDSH.Accord
    name: Accord
    href: NDSH.Accord.html
  - name: .
  - uid: NDSH.Accord.Math
    name: Math
    href: NDSH.Accord.Math.html
  - name: .
  - uid: NDSH.Accord.Math.Distances
    name: Distances
    href: NDSH.Accord.Math.Distances.html
- uid: NDSH.Accord.Math.Distances.IDistance`2.Distance*
  commentId: Overload:NDSH.Accord.Math.Distances.IDistance`2.Distance
  href: NDSH.Accord.Math.Distances.IDistance-2.html#NDSH_Accord_Math_Distances_IDistance_2_Distance__0__1_
  name: Distance
  nameWithType: IDistance<T, U>.Distance
  fullName: NDSH.Accord.Math.Distances.IDistance<T, U>.Distance
  nameWithType.vb: IDistance(Of T, U).Distance
  fullName.vb: NDSH.Accord.Math.Distances.IDistance(Of T, U).Distance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{U}'
  commentId: '!:U'
  definition: U
  name: U
  nameWithType: U
  fullName: U
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: U
  name: U
  nameWithType: U
  fullName: U
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
